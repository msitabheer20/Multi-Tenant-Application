// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text

  servers Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

// ////////////////////////////////

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id            String   @id @default(uuid())
//   email         String   @unique
//   password      String?
//   name          String?
//   image         String?
//   role          Role     @default(MEMBER)
//   organizationId String?
//   organization  Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
//   accounts      Account[]
//   sessions      Session[]
//   assignedTasks Task[]   @relation("AssignedTasks")
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
// }

// model Organization {
//   id        String   @id @default(uuid())
//   name      String   @unique
//   users     User[]
//   projects  Project[]
//   tasks     Task[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Project {
//   id             String   @id @default(uuid())
//   name           String
//   description    String?
//   organizationId String
//   organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
//   tasks         Task[]
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
// }

// model Task {
//   id             String   @id @default(uuid())
//   title          String
//   description    String?
//   status        TaskStatus @default(PENDING)
//   organizationId String
//   organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
//   projectId      String
//   project        Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
//   assignedToId   String?
//   assignedTo     User? @relation(fields: [assignedToId], references: [id], onDelete: SetNull, name: "AssignedTasks")
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt
// }

// model Account {
//   id                 String  @id @default(uuid())
//   userId             String
//   provider           String
//   providerAccountId  String  @unique
//   refresh_token      String?
//   access_token       String?
//   expires_at         Int?
//   user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model Session {
//   id           String  @id @default(uuid())
//   sessionToken String  @unique
//   userId       String
//   expires      DateTime
//   user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// enum Role {
//   ADMIN
//   MEMBER
//   VIEWER
// }

// enum TaskStatus {
//   PENDING
//   IN_PROGRESS
//   COMPLETED
// }


